import express from "express";
import { makeTransfer, getTransferHistory, depositMoney, withdrawMoney, getBalance } from "../controllers/transfer.controller.js"; // Certifique-se de que estÃ¡ importando os controllers corretamente
import { protectRoute } from "../middleware/auth.middleware.js"; // Middleware de autenticaÃ§Ã£o

const router = express.Router();

// ğŸ”¹ Rota para fazer uma transferÃªncia
// AlteraÃ§Ã£o: O middleware de balance nÃ£o deve ser aplicado aqui, pois o saldo jÃ¡ estÃ¡ sendo retornado pela funÃ§Ã£o `makeTransfer`
router.post("/transfer", protectRoute, makeTransfer);

// ğŸ”¹ Rota para buscar o histÃ³rico de transferÃªncias de um usuÃ¡rio
// A rota para buscar o histÃ³rico estÃ¡ correta. Apenas retornando o histÃ³rico de transferÃªncias.
router.get("/history/:userId", protectRoute, getTransferHistory);

// ğŸ”¹ Rota para depÃ³sito de dinheiro
// A operaÃ§Ã£o de depÃ³sito tambÃ©m deve retornar o saldo atualizado do usuÃ¡rio
router.post("/deposit", protectRoute, depositMoney);

// ğŸ”¹ Rota para saque de dinheiro
// A operaÃ§Ã£o de saque tambÃ©m deve retornar o saldo atualizado do usuÃ¡rio
router.post("/withdraw", protectRoute, withdrawMoney);

export default router;
