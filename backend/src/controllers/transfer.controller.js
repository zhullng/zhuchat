import User from "../models/user.model.js";
import Transfer from "../models/transfer.model.js";

// 游댳 FAZER TRANSFER칅NCIA
export const sendTransaction = async (req, res) => {
  try {
    const { receiverEmail, amount } = req.body;
    const senderId = req.user._id;

    if (!receiverEmail || !amount || amount <= 0) {
      return res.status(400).json({ error: "Dados inv치lidos para a transa칞칚o" });
    }

    // Buscar destinat치rio pelo email
    const receiver = await User.findOne({ email: receiverEmail });
    if (!receiver) {
      return res.status(404).json({ error: "Usu치rio destinat치rio n칚o encontrado" });
    }

    if (senderId.toString() === receiver._id.toString()) {
      return res.status(400).json({ error: "N칚o 칠 poss칤vel transferir para si mesmo" });
    }

    // Buscar o remetente para verificar saldo
    const sender = await User.findById(senderId);
    if (!sender || sender.balance < amount) {
      return res.status(400).json({ error: "Saldo insuficiente" });
    }

    // Atualizar saldo do remetente e destinat치rio
    sender.balance -= Number(amount);
    receiver.balance += Number(amount);
    await sender.save();
    await receiver.save();

    // Criar e salvar transa칞칚o
    const transfer = new Transfer({
      sender: sender._id,
      receiver: receiver._id,
      amount,
      status: "completed",
    });
    await transfer.save();

    res.status(201).json({ message: "Transa칞칚o realizada com sucesso", transaction: transfer });
  } catch (error) {
    console.error("Erro ao processar transa칞칚o:", error.message);
    res.status(500).json({ error: "Erro interno do servidor" });
  }
};


export const getTransactionHistoryWithUser = async (req, res) => {
  try {
    const { id: otherUserId } = req.params; // ID do outro usu치rio na conversa
    const myId = req.user._id; // ID do usu치rio autenticado

    const transfer = await Transfer.find({
      $or: [
        { senderId: myId, receiverId: otherUserId },
        { senderId: otherUserId, receiverId: myId },
      ],
    }).sort({ createdAt: -1 });

    res.status(200).json(transfer);
  } catch (error) {
    console.error("Erro ao buscar hist칩rico de transa칞칫es:", error.message);
    res.status(500).json({ error: "Erro interno do servidor" });
  }
};


// 游댳 DEPOSITAR DINHEIRO
export const depositMoney = async (req, res) => {
  const { userId, amount } = req.body;

  try {
    if (!userId || !amount || amount <= 0) {
      return res.status(400).json({ error: "Valor inv치lido para dep칩sito" });
    }

    const user = await User.findById(userId);
    if (!user) return res.status(404).json({ error: "Usu치rio n칚o encontrado" });

    user.balance += Number(amount); // Garantindo que ambos sejam n칰meros

    await user.save();

    res.json({
      message: "Dep칩sito realizado com sucesso!",
      user: { fullName: user.fullName, balance: user.balance },
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: "Erro ao processar dep칩sito" });
  }
};


// 游댳 SACAR DINHEIRO
export const withdrawMoney = async (req, res) => {
  const { userId, amount } = req.body;

  try {
    if (!userId || !amount || amount <= 0) {
      return res.status(400).json({ error: "Valor inv치lido para saque" });
    }

    const user = await User.findById(userId);
    if (!user) return res.status(404).json({ error: "Usu치rio n칚o encontrado" });

    if (user.balance < amount) {
      return res.status(400).json({ error: "Saldo insuficiente" });
    }

    user.balance -= Number(amount); // Garantindo que ambos sejam n칰meros

    await user.save();

    res.json({
      message: "Saque realizado com sucesso!",
      user: { fullName: user.fullName, balance: user.balance },
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: "Erro ao processar saque" });
  }
};

// 游댳 MOSTRAR SALDO
export const getBalance = async (req, res) => {
  const { userId } = req.params;

  try {
    if (!userId) {
      return res.status(400).json({ error: "ID do usu치rio 칠 obrigat칩rio" });
    }

    const user = await User.findById(userId);
    if (!user) {
      return res.status(404).json({ error: "Usu치rio n칚o encontrado" });
    }

    res.json({
      message: "Saldo recuperado com sucesso!",
      user: { fullName: user.fullName, balance: user.balance },
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: "Erro ao recuperar o saldo" });
  }
};
